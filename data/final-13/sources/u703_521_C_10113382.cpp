#include <algorithm>
#include <iomanip>
#include <istream>
#include <limits>
#include <map>
#include <ostream>
#include <set>
#include <sstream>
#include <utility>
#include <vector>

using namespace std;
// Solution template generated by caide

const unsigned long long MOD = 1000000007ULL;

class Solution {
public:
	unsigned long long ppow(unsigned long long a, unsigned long long n) {
		if (n == 0) return 1;
		unsigned long long res = ppow(a, n / 2);
		res = (res * res) % MOD;
		if (n % 2)
			res = (res * a) % MOD;
		return res;
	}
	unsigned long long inv(unsigned long long a) {
		return ppow(a, MOD - 2);
	}
    void solve(std::istream& in, std::ostream& out) {
		int n, k;
		string s;
		in >> n >> k >> s;
		if (k == 0) {
			unsigned long long res = 0;
			for (char c : s) {
				res = (res * 10 + (c - '0')) % MOD;
			}
			out << res << endl;
			return;
		}
		unsigned long long prefix = 0;
		for (char c : s)
			prefix += (c - '0');

		vector<unsigned long long> C(n);
		C[k - 1] = 1;
		for (int a = k; a < n; ++a) {
			C[a] = C[a - 1] * a % MOD * inv(a + 1 - k) % MOD;
		}

		unsigned long long res = 0, pow10 = 1;
		prefix -= s.back() - '0';
		for (int L = 1; L <= n - k; ++L) {
			unsigned long long add = pow10 * C[n - 1 - L] % MOD * prefix % MOD;
			res += add;
			if (res >= MOD)
				res -= MOD;
			pow10 = pow10 * 10 % MOD;
			prefix -= (s[n - L - 1] - '0');
		}
		pow10 = 1;
		for (int i = n-1; i >= k; --i) {
			unsigned long long Cik = C[i - 1] * i % MOD * inv(k) % MOD;
			unsigned long long add = pow10 * (s[i] - '0') % MOD * Cik % MOD;
			res += add;
			if (res >= MOD)
				res -= MOD;
			pow10 = 10 * pow10 % MOD;
		}
		
		out << res << endl;
    }
};

void solve(std::istream& in, std::ostream& out)
{
    out << std::setprecision(12);
    Solution solution;
    solution.solve(in, out);
}
#include <fstream>
#include <iostream>


int main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);

    istream& in = cin;

    ostream& out = cout;
    solve(in, out);
    return 0;
}
