#include "stdio.h"

int main(){
int yui;scanf("%d",&yui);
for(int hjk=0;hjk<yui;hjk++)

{
int m,k;scanf("%d%d",&m,&k);
int* a=new int[k+1];for(int i=1;i<=k;i++) scanf("%d",(a+i));
int* t=new int[m];int* r=new int[m];
for(int i=0;i<(m-1);i++) scanf("%d%d",(t+i),(r+i));

bool free=true;//отвечает на вопрос: "Не был ли кто-нибудь разочарован до поликарпа?"
for(int i=0;i<(m-1);i++){if(r[i]==1){free=false;}}

if(free){
        int sv=0;//это количество человек, про которых неизвестно, какое они блюдо получили
        //если неизвестно, какое блюдо получили некоторые люди, то надо рассмотреть все возможные комбинации блюд, которые они могли получить
        //и если среди этих комбинаций найдётся хоть одна, при которой данное блюдо кончилось до поликарпа, то ответ для данного блюда будет Y
        //это эквивалентно другой задаче, в которой мы пытаемся построить такую комбинацию, при которой данное блюдо кончится до поликарпа
        //если удастся построить такую комбинацию, то ответ для данного блюда Y
        //в противном случае ответ N
        for(int i=0;i<(m-1);i++){if(t[i]==0){sv++;}
                                 else{a[t[i]]--;}
                                 //если не знаем, какое блюдо человек получил, то учитываем это в sv
                                 //а если знаем, какое блюдо человек получил, то учитываем его, уменьшая количество данного блюда на 1
                                 //таким образом мы мысленно выкидываем человека вместе с полученным им блюдом. Ситуацию это не меняет.
                                }
        for(int i=1;i<=k;i++){
                             if(sv>=a[i]){printf("Y");}
                             else{printf("N");}
                             }
        printf("\n");
        }
else{
    int sv1=0;//это количество человек, получивших блюдо до первого разочарованного пассажира, про которых неизвестно, какое они блюдо получили
    int num;//номер первого разочарованного пассажира
    for(int i=0;i<(m-1);i++){
                            if(r[i]==1){num=i;break;}
                            if(t[i]==0){sv1++;}
                            else{a[t[i]]--;}
                            //если не знаем, какое блюдо человек получил, то учитываем это в sv1
                            //а если знаем, какое блюдо человек получил, то учитываем его, уменьшая количество данного блюда на 1
                            }
    char* ans=new char[k+1];
    //ans - это массив-ответ, который будет выведен
    for(int i=1;i<=k;i++){ans[i]='N';}
    {
    bool* sv=new bool[k+1];for(int i=0;i<(k+1);i++) sv[i]=true;
    //sv[i] отвечает на вопрос "Не было ли i-тое блюдо получено кем-нибудь после подхода стюардессы к первому разочарованному пассажиру?"
    for(int i=num;i<(m-1);i++){sv[t[i]]=false;}
    for(int i=1;i<=k;i++){
                          if(sv[i]&&(sv1>=a[i])){ans[i]='Y';}
                         }
    //внесли в ans те блюда, которые могли закончится до подхода стюардессы к первому разочарованному пассажиру
    delete[] sv;
    }
    //теперь осталось только добавить те блюда, которые могли кончиться после первого разочарованного пассажира
    //если мы смотрим блюдо, и пытаемся построить комбинацию, чтобы оно кончилось после первого разочарованного пассажира,
    //то надо максимизировать количество людей, которым мы можем выбирать, какое блюдо досталось
    //но надо чтобы перед первым разочарованным кончилось хотя бы одно блюдо. Одного кончившегося блюда вполне достаточно - остальные могли выбирать его.
    // для этого надо сделать так, чтобы перед первым разочарованным пассажиром кончилось блюдо с наименьшим a[i], которое не было получено пассажирами после:
    {
    bool* sv=new bool[k+1];for(int i=0;i<(k+1);i++) sv[i]=true;
    for(int i=num;i<(m-1);i++){sv[t[i]]=false;}
    int min=1000000;for(int i=1;i<=k;i++){if(sv[i]&&(min>a[i])){min=a[i];}}
    //for(int i=1;i<=k;i++){if(sv[i]&&(min==a[i])&&(i!=r[num])){a[i]=0;break;}}//учли людей, которым выбрали i-тое блюдо, чтобы оно кончилось перед поликарпом
    sv1-=min;
    delete[] sv;
    }
    //дальше sv1 будет иметь смысл количества пассажиров, идущих до поликарпа, которым можем определять блюдо
    for(int i=num;i<(m-1);i++){
                              if(t[i]==0){sv1++;}
                              else{a[t[i]]--;}
                              }
    for(int i=1;i<=k;i++){
                         if(sv1>=a[i]){ans[i]='Y';}
                         }
    for(int i=1;i<=k;i++) printf("%c",ans[i]);
    printf("\n");
    delete[] ans;
    }
delete[] a;delete[] r;delete[] t;
}

return 0;
}